// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const User = sequelize.define('user', {
    createdAt: {
      type: DataTypes.BIGINT,
    },
    updatedAt: {
      type: DataTypes.BIGINT,
    },
    email: {
      type: DataTypes.STRING,
    },
    password: {
      type: DataTypes.STRING,
    },
    firstName: {
      type: DataTypes.STRING,
    },
    lastName: {
      type: DataTypes.STRING,
    },
    profileImageUrl: {
      type: DataTypes.STRING,
      field: 'profileImageURL',
    },
    level: {
      type: DataTypes.DOUBLE,
    },
    status: {
      type: DataTypes.STRING,
    },
    emailVerified: {
      type: DataTypes.INTEGER,
    },
    providers: {
      type: DataTypes.STRING,
    },
    providerData: {
      type: DataTypes.STRING,
    },
    phoneNumber: {
      type: DataTypes.STRING,
    },
    dateOfBirth: {
      type: DataTypes.DOUBLE,
    },
    address1: {
      type: DataTypes.STRING,
    },
    address2: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
    },
    country: {
      type: DataTypes.STRING,
    },
    latitude: {
      type: DataTypes.DOUBLE,
    },
    longitude: {
      type: DataTypes.DOUBLE,
    },
    postalCode: {
      type: DataTypes.STRING,
    },
    verificationCode: {
      type: DataTypes.STRING,
    },
    deviceIDs: {
      type: DataTypes.STRING,
    },
    isSubcribed: {
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: 'user',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v5/reference-guide/relationships#adding-relationships.
  User.associate = (models) => {
    User.belongsToMany(models.book, {
      through: models.userbook,
      otherKey: 'book',
      foreignKey: 'user'
    });
  };

  return User;
};
